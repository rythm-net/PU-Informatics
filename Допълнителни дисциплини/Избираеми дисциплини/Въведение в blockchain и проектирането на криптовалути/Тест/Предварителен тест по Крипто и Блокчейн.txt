1. Какво представлява Solidity?
Отг: B) Програмен език за създаване на смарт договори за Ethereum

2. Какво представлява 'Proof of Stake' в контекста на блокчейн технологията?
Отг: A) Метод за доказателство за притежание на дял от мрежата

3. Каква е функцията на Gas в Ethereum?
Отг: C) Единица за измерване на изчислителната работа, необходима за извършване на операции

4. Какво представлява хеширането?
Отг: B) Преобразуване на данни в уникален хеш код

5. Какъв е основният принцип на асиметричното криптиране?
Отг: B) Използване на различни ключове за криптиране и декриптиране

6. Какво представлява ERC20 токен в контекста на Ethereum?
Отг: B) Стандарт за смарт договори, представляващи токени

7. Каква е ролята на смарт договорите в блокчейн технологията?
Отг: B) Автоматизиране и изпълнение на договорни условия без посредници

8. Какво е хеширане в контекста на криптовалути?
Отг: B) Преобразуване на транзакционни данни в уникален хеш код

9. Какво е ICO в сферата на криптовалутите?
Отг: B) Инициално предлагане на монети, метод за набиране на средства

10. Какво представлява газовият лимит в Ethereum?
Отг: C) Максималното количество газ, което потребител е готов да плати за
транзакция

11. Какво е "майнинг" в контекста на криптовалутите?
Отг: B) Процес на генериране на нови криптовалути чрез изчислителен труд

12. Каква е основната цел на криптографията?
Отг: B) Защита на информация чрез преобразуване в неразбираем формат

13. Какво представлява "Proof of Work" в блокчейн технологията?
Отг: A) Метод за доказателство за извършена работа при майнинг

14. Какво е "форк" (fork) в контекста на блокчейн?
Отг: A) Разделяне на блокчейн на две отделни вериги

15. Какво е "смарт договор"?
Отг: B) Автоматизиран договор, който се изпълнява в блокчейн мрежата

16. Какво представлява 'Proof of Stake' в контекста на блокчейн технологията?
Отг: A) Метод за доказателство за притежание на дял от мрежата

17. Какво представлява терминът 'децентрализация' в света на криптовалутите?
Отг: B) Разпределение на контрола и властта от централизирана организация към множество участници

18. Какво е цифров портфейл в контекста на криптовалути?
Отг: A) Софтуерно приложение за съхранение и управление на криптовалути

19. Какво е 'сегментация' (Sharding) в контекста на блокчейн?
Отг: A) Разделяне на блокчейн на по-малки сегменти за по-голяма ефективност

20. Как функционира технологията за разпределена книга (Distributed Ledger Technology - DLT)?
Отг:B) Чрез множество копия на база данни, разпределени сред множество участници

--------------------------------------------------------------------------------------------------------------------------------

Задача: Напишете Smart Contracts на Solidity, реализиращ магазин за автомобили.
Всеки автомобил има марка, модел, серия, гориво, единична цена, брой седалки, брой врати, цвят, джип/SUV/лек/товарен, наличност. 
Да има метод, който връща сумата пари, за които има автомобили в склада. 
Да има и метод за въвеждане на автомобил.

Решение:

// Указваме версията на Solidity
pragma solidity ^0.8.0;

// Дефинираме контракта
contract CarShop {
    // Структура за представяне на автомобил
    struct Car {
        string brand;
        string model;
        string series;
        string fuelType;
        uint256 price;
        uint8 seats;
        uint8 doors;
        string color;
        string type; // "Джип", "SUV", "Лек", "Товарен"
        bool available;
    }

    // Списък с всички автомобили в магазина
    Car[] public cars;

    // Метод за въвеждане на нов автомобил
    function addCar(
        string memory _brand,
        string memory _model,
        string memory _series,
        string memory _fuelType,
        uint256 _price,
        uint8 _seats,
        uint8 _doors,
        string memory _color,
        string memory _type
    ) 
    public {
        // Създаваме нов автомобил
        Car memory newCar = Car({
            brand: _brand,
            model: _model,
            series: _series,
            fuelType: _fuelType,
            price: _price,
            seats: _seats,
            doors: _doors,
            color: _color,
            type: _type,
            available: true
        });

        // Добавяме го към списъка с автомобили
        cars.push(newCar);
    }

    // Метод за връщане на общата сума пари за всички налични автомобили
    function calculateTotalValue() public view returns (uint256) {
        uint256 totalValue = 0;

        // Обхождаме всички автомобили
        for (uint256 i = 0; i < cars.length; i++) {
            // Ако автомобилът е наличен, добавяме цената му към общата стойност
            if (cars[i].available) {
                totalValue += cars[i].price;
            }
        }

        return totalValue;
    }
}
