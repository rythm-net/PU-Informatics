
# parsetab.py
# This file is automatically generated. Do not edit.
# pylint: disable=W,C,R
_tabversion = '3.10'

_lr_method = 'LALR'

_lr_signature = 'COMMA DIVIDE FUNNAME LPAREN MINUS NUMBER PLUS POW RPAREN TIMESexpression : expression PLUS termexpression : expression MINUS termexpression : termterm : term TIMES factorterm : term DIVIDE factorterm : term POW factorterm : factorfactor : NUMBERfactor : LPAREN expression RPARENfactor : FUNNAME LPAREN expression RPARENfactor : FUNNAME LPAREN RPARENfactor : FUNNAME LPAREN expression COMMA expression RPARENfactor : FUNNAME LPAREN expression COMMA expression COMMA expression RPAREN'
    
_lr_action_items = {'NUMBER':([0,5,7,8,9,10,11,13,23,25,],[4,4,4,4,4,4,4,4,4,4,]),'LPAREN':([0,5,6,7,8,9,10,11,13,23,25,],[5,5,13,5,5,5,5,5,5,5,5,]),'FUNNAME':([0,5,7,8,9,10,11,13,23,25,],[6,6,6,6,6,6,6,6,6,6,]),'$end':([1,2,3,4,14,15,16,17,18,19,21,22,26,28,],[0,-3,-7,-8,-1,-2,-4,-5,-6,-9,-11,-10,-12,-13,]),'PLUS':([1,2,3,4,12,14,15,16,17,18,19,20,21,22,24,26,27,28,],[7,-3,-7,-8,7,-1,-2,-4,-5,-6,-9,7,-11,-10,7,-12,7,-13,]),'MINUS':([1,2,3,4,12,14,15,16,17,18,19,20,21,22,24,26,27,28,],[8,-3,-7,-8,8,-1,-2,-4,-5,-6,-9,8,-11,-10,8,-12,8,-13,]),'RPAREN':([2,3,4,12,13,14,15,16,17,18,19,20,21,22,24,26,27,28,],[-3,-7,-8,19,21,-1,-2,-4,-5,-6,-9,22,-11,-10,26,-12,28,-13,]),'COMMA':([2,3,4,14,15,16,17,18,19,20,21,22,24,26,28,],[-3,-7,-8,-1,-2,-4,-5,-6,-9,23,-11,-10,25,-12,-13,]),'TIMES':([2,3,4,14,15,16,17,18,19,21,22,26,28,],[9,-7,-8,9,9,-4,-5,-6,-9,-11,-10,-12,-13,]),'DIVIDE':([2,3,4,14,15,16,17,18,19,21,22,26,28,],[10,-7,-8,10,10,-4,-5,-6,-9,-11,-10,-12,-13,]),'POW':([2,3,4,14,15,16,17,18,19,21,22,26,28,],[11,-7,-8,11,11,-4,-5,-6,-9,-11,-10,-12,-13,]),}

_lr_action = {}
for _k, _v in _lr_action_items.items():
   for _x,_y in zip(_v[0],_v[1]):
      if not _x in _lr_action:  _lr_action[_x] = {}
      _lr_action[_x][_k] = _y
del _lr_action_items

_lr_goto_items = {'expression':([0,5,13,23,25,],[1,12,20,24,27,]),'term':([0,5,7,8,13,23,25,],[2,2,14,15,2,2,2,]),'factor':([0,5,7,8,9,10,11,13,23,25,],[3,3,3,3,16,17,18,3,3,3,]),}

_lr_goto = {}
for _k, _v in _lr_goto_items.items():
   for _x, _y in zip(_v[0], _v[1]):
       if not _x in _lr_goto: _lr_goto[_x] = {}
       _lr_goto[_x][_k] = _y
del _lr_goto_items
_lr_productions = [
  ("S' -> expression","S'",1,None,None,None),
  ('expression -> expression PLUS term','expression',3,'p_expression_plus','yacc.py',8),
  ('expression -> expression MINUS term','expression',3,'p_expression_minus','yacc.py',13),
  ('expression -> term','expression',1,'p_expression_term','yacc.py',18),
  ('term -> term TIMES factor','term',3,'p_term_times','yacc.py',23),
  ('term -> term DIVIDE factor','term',3,'p_term_div','yacc.py',28),
  ('term -> term POW factor','term',3,'p_term_pow','yacc.py',37),
  ('term -> factor','term',1,'p_term_factor','yacc.py',42),
  ('factor -> NUMBER','factor',1,'p_factor_num','yacc.py',47),
  ('factor -> LPAREN expression RPAREN','factor',3,'p_factor_expr','yacc.py',52),
  ('factor -> FUNNAME LPAREN expression RPAREN','factor',4,'p_factor_func','yacc.py',57),
  ('factor -> FUNNAME LPAREN RPAREN','factor',3,'p_factor_func_no_param','yacc.py',62),
  ('factor -> FUNNAME LPAREN expression COMMA expression RPAREN','factor',6,'p_factor_function_binary','yacc.py',67),
  ('factor -> FUNNAME LPAREN expression COMMA expression COMMA expression RPAREN','factor',8,'p_factor_function_teriary','yacc.py',72),
]
